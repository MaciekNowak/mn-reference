#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <signal.h>
#include <sqlcpr.h>
#include <sqlda.h>
#include <sqlca.h>
#include <unistd.h>

#define MAX_SELECT_LIST_ITEMS 1000
#define MAX_VNAME_LEN 100
#define MAX_INAME_LEN 100
#define FROM_STDIN "-+!@@"

char *getSelectFromFile(char *);
void markPoint(char *,char *,int);
void setDescIORA(void);
void setDescIIORA(void);
void sqlErr(void);
void errMsg(char *,char *,int);
void usageMsg(char *);
void finito(int);

int		g_debug=0;
int		maxColNameL=0;
SQLDA	*selectDesc;

int main(int argc, char **argv)
{
EXEC SQL begin declare section;
char		*uname;
char		*passwrd;
char		*selTxt=NULL;
EXEC SQL end declare section;

char		c;
int			i;
int			totalRows;
char		cName[ MAX_VNAME_LEN ];

if(signal(SIGTERM,finito)==SIG_ERR)
{
	errMsg("signal SIGTERM",__FILE__,__LINE__);
}

if(signal(SIGINT,finito)==SIG_ERR)
{
	errMsg("signal SIGINT",__FILE__,__LINE__);
}

uname=passwrd=NULL;

while((c=getopt(argc,argv,"f:q:u:p:hd?"))!=EOF)
{
	switch(c)
	{
		case 'f':
			selTxt=getSelectFromFile(optarg);
			break;

		case 'q':
			if((selTxt=malloc(sizeof(char)*(strlen(optarg)+1)))==NULL)
			{
				errMsg("malloc",__FILE__,__LINE__);
			}
			strcpy(selTxt,optarg);
			break;

		case 'u':
			if((uname=malloc(sizeof(char)*(strlen(optarg)+1)))==NULL)
			{
				errMsg("malloc",__FILE__,__LINE__);
			}
			strcpy(uname,optarg);
			break;

		case 'p':
			if((passwrd=malloc(sizeof(char)*(strlen(optarg)+1)))==NULL)
			{
				errMsg("malloc",__FILE__,__LINE__);
			}
			strcpy(passwrd,optarg);
			break;

		case 'h':
			usageMsg("");

		case 'd':
			g_debug=1;
			break;

		case '?':
		default:
			usageMsg("unknown option");
	}
}

if(selTxt==NULL)
{
	selTxt=getSelectFromFile(FROM_STDIN); /* STDIN */
}

markPoint("BEGINNING",__FILE__,__LINE__);
markPoint(selTxt,__FILE__,__LINE__);

EXEC SQL whenever sqlerror do sqlErr();

if(uname==NULL || passwrd==NULL)
{
	if((uname=malloc(sizeof(char)*2))==NULL)
	{
		errMsg("malloc",__FILE__,__LINE__);
	}
	strcpy(uname,"/");
	EXEC SQL connect :uname;
}
else
{
	EXEC SQL connect :uname identified by :passwrd;
}
markPoint("after EXEC SQL connect",__FILE__,__LINE__);

setDescIORA();
markPoint("after setDescIORA()",__FILE__,__LINE__);

EXEC SQL prepare mnStmt from :selTxt;
markPoint("after EXEC SQL prepare",__FILE__,__LINE__);

EXEC SQL declare mnCrsr cursor for mnStmt;
markPoint("after EXEC SQL declare",__FILE__,__LINE__);

EXEC SQL open mnCrsr;
markPoint("after EXEC SQL open",__FILE__,__LINE__);

selectDesc->N=MAX_SELECT_LIST_ITEMS;

EXEC SQL describe select list for mnStmt into selectDesc;
markPoint("after EXEC SQL describe",__FILE__,__LINE__);

setDescIIORA();
markPoint("after setDescIIORA()",__FILE__,__LINE__);

totalRows=0;

while(1)
{
	EXEC SQL fetch mnCrsr using descriptor selectDesc;

	if(sqlca.sqlcode==1403)
	{
		break;
	}

	markPoint("after EXEC SQL fetch",__FILE__,__LINE__);

	totalRows++;

	memset(cName,'-',MAX_VNAME_LEN);
	cName[ maxColNameL-1 ]='\0';
	printf("%s\n",cName);

	for(i=0;i<selectDesc->N;i++)
	{
		memset(cName,' ',MAX_VNAME_LEN);
		strncpy(cName,selectDesc->S[ i ],selectDesc->C[ i ]);
		cName[ maxColNameL-1 ]='\0';
		printf("%s: ",cName);
		if(*(selectDesc->I[ i ])==-1)
		{
			printf("<NULL>\n");
		}
		else
		{
			*(selectDesc->V[ i ]+selectDesc->L[ i ])='\0';
			printf("%s\n",(char *)(selectDesc->V[ i ]));
		}
		fflush(NULL);
	}
}

fprintf(stderr,"\n\n%d rows selected\n\n",totalRows);

markPoint("THE END",__FILE__,__LINE__);
}

#define INIT_SEL_BUF_SIZE 1000

char *getSelectFromFile(char *fileName)
{
FILE	*fh=stdin;
char	*selText,*q;
int		c,ii=0,blks=1;

if(strcmp(fileName,FROM_STDIN)!=0)
{
	if((fh=fopen(fileName,"r"))==NULL)
	{
		errMsg("fopen",__FILE__,__LINE__);
	}
}

if((selText=malloc(sizeof(char)*INIT_SEL_BUF_SIZE))==NULL)
{
	errMsg("malloc",__FILE__,__LINE__);
}

while((c=getc(fh))!=EOF)
{
	selText[ ii++ ]=c;

	if(ii>=INIT_SEL_BUF_SIZE*blks-1)
	{
		selText[ ii ]='\0';
		q=selText;
		blks++;
		if((selText=malloc(sizeof(char)*blks*INIT_SEL_BUF_SIZE))==NULL)
		{
			errMsg("malloc",__FILE__,__LINE__);
		}
		for(ii=0;q[ ii ]!='\0';ii++)
		{
			selText[ ii ]=q[ ii ];
		}
	}
}
selText[ ii ]='\0';

fclose(fh);
return(selText);
}

void setDescIORA()
{
int		i;

if((selectDesc=sqlald(MAX_SELECT_LIST_ITEMS,
						MAX_VNAME_LEN,MAX_INAME_LEN))==NULL)
{
	errMsg("sqlald failed",__FILE__,__LINE__);
}
selectDesc->N=MAX_SELECT_LIST_ITEMS;

for(i=0;i<MAX_SELECT_LIST_ITEMS;i++)
{
	selectDesc->V[ i ]=(char *)malloc(sizeof(1));
	if(selectDesc->V[ i ]==NULL)
	{
		errMsg("malloc selectDesc->V[ i ]",__FILE__,__LINE__);
	}
	selectDesc->I[ i ]=(short *)malloc(sizeof(short));
	if(selectDesc->I[ i ]==NULL)
	{
		errMsg("malloc selectDesc->I[ i ]",__FILE__,__LINE__);
	}
}
}

void setDescIIORA()
{
int		i,nok,p,s;

if(selectDesc->F<0)
{
	errMsg("EXEC SQL describe : selectDesc->F<0",__FILE__,__LINE__);
}

selectDesc->N=selectDesc->F;

for(i=0;i<selectDesc->F;i++)
{
	if(maxColNameL<selectDesc->C[ i ])
	{
		maxColNameL=selectDesc->C[ i ];
		if(maxColNameL>=MAX_VNAME_LEN)
		{
			errMsg("column name too long",__FILE__,__LINE__);
		}
	}

	sqlnul((unsigned short *)&(selectDesc->T[ i ]),
			(unsigned short *)&(selectDesc->T[ i ]),&nok);

	switch(selectDesc->T[ i ])
	{
		case 1:
			selectDesc->L[ i ]++;
			selectDesc->T[ i ]=5;
			break;

		case 2:
			sqlprc(&(selectDesc->L[ i ]),&p,&s);
			if(p==0)
			{
				p=40;
			}
			selectDesc->L[ i ]=p+2;
			if(s<0)
			{
				selectDesc->L[ i ]+=-s;
			}
			selectDesc->L[ i ]=38;
			selectDesc->T[ i ]=5;
			break;

		case 8:
			selectDesc->L[ i ]=1024;
			selectDesc->T[ i ]=5;
			break;

		case 11:
			selectDesc->L[ i ]=19;
			selectDesc->T[ i ]=5;
			break;

		case 12:
			selectDesc->L[ i ]=10;
			selectDesc->T[ i ]=5;
			break;

		case 23:
			break;

		case 24:
			selectDesc->L[ i ]=241;
			selectDesc->T[ i ]=5;
			break;

		default:
			selectDesc->L[ i ]=41;
			selectDesc->T[ i ]=5;
	}

	selectDesc->V[ i ]=(char *)malloc(selectDesc->L[ i ]+1);
	if(selectDesc->V[ i ]==NULL)
	{
		errMsg("realloc selectDesc->V[ i ]",__FILE__,__LINE__);
	}
	memset(selectDesc->V[ i ],'\0',selectDesc->L[ i ]+1);
}
maxColNameL++;
}

void markPoint(char *markTxt,char *sourceFile, int sourceLine)
{
if(g_debug)
{
	fprintf(stderr,"---> DEBUG %s (%s:%d)\n",markTxt,sourceFile,sourceLine);
}
}

void sqlErr()
{
fprintf(stderr,"%d   %.70s\n",sqlca.sqlcode,sqlca.sqlerrm.sqlerrmc);
exit(2);
}

void errMsg(char *errTxt,char *sourceFile, int sourceLine)
{
fprintf(stderr,"%s (%s:%d)\n",errTxt,sourceFile,sourceLine);
exit(1);
}

void usageMsg(char *errTxt)
{
fprintf(stderr,"\nUsage:\n");
fprintf(stderr,"mnselect -q \"select ...\" | -f filename [-u user] [-p password] [-d(ebug)] [-h(elp)]\n\n");
fprintf(stderr,"\tif neither -q nor -f is given STDIN is read\n\n");
if(strlen(errTxt)>0)
{
	fprintf(stderr,"\tError : %s\n\n",errTxt);
}
exit(1);
}

void finito(int i)
{
fprintf(stderr,"\n\nExiting...\n\n");
exit(i);
}
